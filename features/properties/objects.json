{
    "baseModule": {
        "login": {
            "username": "username",
            "password": "password",
            "loginButton": "kc-login",
            "loadingImage": "//div[@class='loading']"
        },
        "headerLinks": {
            "APIlink": "APIs",
            "applicationsLink": "//a[contains(text(),'Applications')]",
            "PoliciesLink": "Policies"
        }
    },
    "createAPIs": {
        "createAPI": {
            "createAPIButton": "Create API",
            "importFromURLRadioButton": "//div[@id='collapseTwo']/preceding-sibling::div//div[@class='createapi-radio']",
            "url": "url",
            "apiNameURL": "//div[@id='collapseTwo']//input[@id='name']",
            "fileTypeURL": "//div[@id='collapseTwo']//*[@id='filetype']/option[text()='",
            "versionURL": "//div[@id='collapseTwo']//input[@id='version']",
            "createButtonURL": "//*[@id='collapseTwo']//button",
            "browseButton": "//label[@for='UploadfileAPI']//span[contains(text(),'Browse')]",
            "apiNameFile": "//div[@id='collapseOne']//input[@id='name']",
            "fileTypeFile": "//div[@id='collapseOne']//*[@id='filetype']/option[text()='",
            "versionFile": "//div[@id='collapseOne']//input[@id='version']",
            "createButtonFile": "//*[@id='collapseOne']//span/button",
            "activateButton": "//button[text()='Activate']",
            "createAPIfromScratchRadioButton": "//div[@id='collapseFour']/preceding-sibling::div//div[@class='createapi-radio']",
            "createButtonScratch": "//*[@id='collapseFour']//button",
            "apiName": "Name",
            "version": "Version",
            "maturityState1": "//*[@id='maturityState']/option[text()='",
            "maturityState2": "']",
            "technicalInformation": "//*[@id='api_create_edit_left_panel']//a/i[contains(@class,'wrench')]",
            "serverURL": "//div[@class='col-md-6']//input[@id='url']",
            "addButton": "//button[text()='Add']",
            "saveButton": "//button[text()='Save']",
            "commonEndingXpath": "']"
        },
        "manageAPI": {
            "waitToDisplayAllAPIs": "//ul[contains(@class,'pagenationbar')]",
            "openAPILink_1": "//td[label[text()='",
            "openAPILink_2": "']]/preceding-sibling::td/label[text()='",
            "openAPILink_3": "']",
            "verifyODataAPI": "//tr[td/img[@alt='ODATA API'] and td/label[text()='",
            "verifyRestAPI": "//tr[td/img[@alt='REST API'] and td/label[text()='",
            "verifySoapAPI": "//tr[td/img[@alt='SOAP API'] and td/label[text()='",
            "verifyAPILink": "']]",
            "activateIcon1": "//tr[td[label[text()='",
            "activateIcon2": "']] and td[label[text()='",
            "activateIcon3": "']]]/td[8]//span[contains(@class,'toggle-knob')]",
            "selectCheckBox3": "']]]/td[1]//span[@class='tooltip']//label/preceding-sibling::input",
            "publishIcon1": "']]]/td[9]//i",
            "httpEndPoint": "//div[@class='api-endpoints']//tr[1]//td[1]//input[1]",
            "httpsEndPoint": "//div[@class='api-endpoints']//tr[2]//td[1]//input[1]",
            "endPointLabel1": "//div[@class='api-endpoints']//tr[1]//label",
            "unPublishIcon1": "']]]/td[10]//div[@title='Unpublish']",
            "activateAPIWindow": "//div[@id='activation-api-modal']//div[@class='modal-header information']",
            "activateAPIYesButton": "//*[@id='activation-api-modal']//button[@class='btn btn-primary' and text()='Yes']",
            "publishButton": "//*[@id='publish-republish-api-modal']//button[contains(text(),'Publish')]",
            "publishMessage": "//*[@id='alert_global-messenger']//span[contains(text(),'published successfully')]",
            "unPublishButton": "//*[@id='unpublish-api-modal']//button[contains(text(),'Unpublish')]",
            "deleteIcon": "']]]//span[@title='Delete']",
            "deleteYesButton": "//*[@id='delete-api-modal']//button[@class='btn btn-primary' and text()='Yes']",
            "versionPublishIcon1": "//tr//td[label[text()='",
            "versionPublishIcon2": "']]/following-sibling::td[2][label[text()='",
            "versionPublishIcon3": "']]/following-sibling::td[4]/div/a/div/i",
            "versionRepublishIcon3": "']]/following-sibling::td[4]/div/a/span"
        }
    },
    "Applications": {
        "createApplications": {
            "createApplicationButton": "//button[text()='Create application']",
            "name": "name",
            "version": "version",
            "description": "description",
            "cancelButton": "//workspace-center//button[1]",
            "saveButton": "//workspace-center//button[2]",
            "APIs": "//*[@id='application_create_edit_left_panel']//a[3]",
            "IndenfierLink": "//*[@id='application_create_edit_left_panel']//a[2]",
            "findAPI": "//input[@placeholder='Type a keyword']",
            "selectAPI1": "//tr[td[label[@title='",
            "selectAPI2": "']] and td[contains(text(),'",
            "selectAPI3": "')]]",
            "editButton": "//button[text()='Edit']"
        },
        "manageApplications": {
            "selectApplication1": "//*[@id='application-manage-table']//label[@title='",
            "selectApplication2": "']",
            "headerIdentifiersKey" : "//div[@id='addHeadersIdentifier']//input[@id='key']",
            "headerIdentifiersValue" : "//div[@id='addHeadersIdentifier']//input[@id='value']",
            "headerIdentifiersAddButton" : "//div[@id='addHeadersIdentifier']//button[text()='Add']",
            "saveButton" : "//text()[contains(.,'Save')]/ancestor::button[1]"
        }
    },
    "APILevelSpecfications": {
        "APIdetails": {
            "restOdata04_1": "//div[@id='Airlines']",
            "restOdata04_2": "//div[label[text()='GET'] and label[text()='/Airlines']]",
            "restOdata04_3": "//div[label[text()='POST'] and label[text()='/Airlines']]",
            "activateButton": "//button[text()='Activate']",
            "createNewVersionButton": "//button[text()='Create new version']/i",
            "versionTextBox": "//input[@id='newVersion']",
            "createButton": "//button[text()='Create']",
            "resourcesAndMethods": "//*[@id='api_create_edit_left_panel']//a/i[contains(@class,'fa-cubes')]",
            "addResourcesButton": "//button[contains(text(),'Add resources')]",
            "resourceName": "1_name",
            "resourcePath": "undefined_resrcPath",
            "resourceMethod1": "//label[text()='",
            "resourceMethod2": "']",
            "addButton": "//button[text()='Add']",
            "editButton": "//button[text()='Edit']"
        },
        "Scopes": {},
        "Policies": {
            "clickPoliciesButton": "policies",
            "clickEditButton": "Edit",
            "clickYesForEdit": "//div[div[text()='Edit active API']]/following-sibling::div//button[text()='Yes']",
            "clickSaveButton": "Save",
            "clickOnSpecificPolicy_1": "//h6[text()='",
            "clickOnSpecificPolicy_2": "']",
            "currentViewinActionContainer": "infogfxActionContainerFooter",
            "currentPolicyAddedView_1": "//div[@id='infogfxActionContainerBody']//span[text()='",
            "currentPolicyAddedView_2": "']",
            "checkAlreadyAddedPolicies": "#infogfxActionContainerBody infogfx-policy-action",
            "addPolicyPropertiesButton_1": "//li[@title='",
            "addPolicyPropertiesButton_2": "']",
            "checkAfteraddingProperty": "policy-action-name",
            "modifyPolicyPropertyButton_1": "//div[@id='infogfxActionContainerBody']//span[text()='",
            "modifyPolicyPropertyButton_2": "']",
            "commonXpathEnding": "']",
            "ThreatProtection": {},
            "Transport": {
                "checkforHTTPHTTPSSelection_1": "//label[text()='",
                "checkforHTTPHTTPSSelection_2": "']/preceding-sibling::input"
            },
            "Identify_Access": {
                "checkforAuthorizeCheckBox": "//label[text()='",
                "verifyAllowAnonymusCheckBox": "//label[@for='Allow anonymous']/preceding-sibling::input",
                "clickAllowAnonymusCheckBox": "//label[@for='Allow anonymous']",
                "identificationType": "//span[text()='",
                "selectApplookupCondition_1": "//boolean-checkbox-field[span//span[text()='",
                "selectApplookupCondition_2": "']]/following-sibling::div//option[text()='",
                "verifyidAccessTypes_1": "//label[span[text()='",
                "verifyidAccessTypes_2": "']]/preceding-sibling::input"
            },
            "RequestProcessing": {},
            "TrafficMonitoring": {
                "verifyLogInvocationTypes_1": "//label[span[text()='",
                "verifyLogInvocationTypes_2": "']]/preceding-sibling::input",
                "clickLogInvocationTypes": "//span[text()='",
                "clickLogGenFrequency": "//option[text()='",
                "verifyDestination_1": "//label[span[text()='",
                "verifyDestination_2": "']]/preceding-sibling::input",
                "clickDestination": "//span[text()='",
                "clickTrottelingValues": "//input[contains(@id,'throttleRule')]",
                "typeAlertInterval": "//input[contains(@id,'alertInterval')]",
                "clickUnit": "//option[text()='",
                "clickAlertFrequency": "//label[text()='",
                "typeAlertMessage": "//input[contains(@id,'alertMessage')]",
                "typeConsumerApplication": "//input[contains(@id,'consumerIds')]",
                "selectConsumerApplication": "//td[text()='"
            },
            "Routing": {
                "outboundAuthScheme": "//option[text()='",
                "outboundUsername": "//input[contains(@id,'userName')]",
                "outboundPassword": "//input[contains(@id,'password')]",
                "outboundDomain": "//input[contains(@id,'domain')]",
                "outboundClientPrincipal": "//input[contains(@id,'clientPrincipal')]",
                "outboundClientPassword": "//input[contains(@id,'clientPassword')]",
                "outboundServicePrincipal": "//span[input[contains(@id,'servicePrincipal')]]",
                "outboundOauthToken": "//input[contains(@id,'oauth2Token')]",
                "straightEndpointURI": "//input[contains(@id,'endpointUri')]",
                "straightHttpMethod": "//option[text()='",
                "straightConnectTimeout": "//input[contains(@id,'connectTimeout')]",
                "straightReadTimeout": "//input[contains(@id,'readTimeout')]",
                "straightKeyStoreAlias": "//input[contains(@id,'keyStoreAlias')]",
                "straightClick": "//td[text()='",
                "striaghtKeyAlias": "//input[contains(@id,'keyAlias')]"
            },
            "ErrorHandling": {},
            "ResponseProcessing": {},
            "applyTemplate": {
                "clickApplyTemplateButton": "//button[text()='Apply Template']",
                "chooseTemplate_1": "//span[text()='",
                "chooseTemplate_2": "']",
                "nextbutton": "//button[text()='Next']",
                "importWithConflicts": "//button[text()='Import with conflicts']",
                "importbutton": "//li//button[text()='Import']"
            }
        },
        "Mashups": {},
        "Applications": {},
        "Analytics": {}
    },
    "globalLevelSpecifications": {
        "createTemplate": {
            "policyTemplateLink": "template",
            "createPolicyTemplateButton": "//button[text()='Create policy template']",
            "policiesConfButton": "policies",
            "templateName": "name",
            "templateDescription": "description",
            "saveButton": "//button[text()='Save']",
            "verifyTemplate_1": "//label[@title='",
            "verifyTemplate_2": "']"
        },
        "globalPolicies": {
            "globalPolicyLink": "global",
            "createGlobalPolicyButton": "//button[text()='Create global policy']",
            "policiesconfButton": "policies",
            "globalName": "name",
            "globalDescription": "description",
            "applyGlobalFiltersLink": "Continue to filters",
            "globalAPIType_1": "//label[text()='",
            "globalAPIType_2": "']/preceding-sibling::input",
            "globalAPIType_3": "']",
            "globalHttpMethod": "//span[text()='",
            "globalLogOperator": "//label[text()='",
            "globalApiAttribute": "//option[text()='",
            "globalApiAttributeValue": "api_attribute_value",
            "globalAddButton": "//button[text()='Add']",
            "globeCommon": "']",
            "globeSaveButton": "//button[text()='Save']",
            "globePolicyAPILevel_1": "//div[span[text()='",
            "globePolicyAPILevel_2": "']]",
            "globePolicyAPILevel_3": "']]/preceding-sibling::popover2-widget//span[contains(@class,'fa-globe')]",
            "globeActivate_1": "//td[label[text()='",
            "globeActivate_2": "']]/following-sibling::td//a[@href='#activation-policy-modal']",
            "globeYes": "//button[text()='Yes']",
            "globeError": "//div[text()='ERROR!']",
            "globeGetError": "//div[contains(@class,'font-modal-content')]",
            "globeCloseError": "//div[@class='modal-header error']//button[@class='close']/span"
        }
    },
    "apiPortal": {
        "baseModule": {
            "login": {
                "username": "username",
                "password": "password",
                "loginButton": "kc-login",
                "loadingImage": "//div[@class='loading']",
                "appSwitcher": "//img[contains(@src,'app-switcher')]",
                "apiPortalLink": "//span[text()='API Portal']",
                "loadingPage": "api-loading-container"
            },
            "headerLinks": {
                "apiGalleryLink": "//a[contains(text(),'API gallery')]"
            }
        },
        "apiGallery": {
            "viewDetails1": "//button[@name='view details of ",
            "viewDetails2": "']"
        },
        "apiDetails": {
            "general": {
                "tryAPIButton": "//*[@id='section_portal_api_try_out']/button/span",
                "sendButton": "//button[@class='btn btn-primary' and text()='Send']",
                "response": "//h3[contains(text(),'Response')]",
                "statusCode": "//*[@id='status-data']",
                "versionDropDown": "//a[@class='btn dropdown-toggle']/span",
                "selectedVersionValue": "//li[@class='list-item selected']/a/span",
                "selectVersion1": "//li[@class='list-item']/a/span[contains(text(),'",
                "selectVersion2": "')]",
                "parametersTab": "//a[contains(text(),'Parameters')]",
                "parametersKey": "//input[@id='gwt-uid-126']",
                "parametersValue": "//input[@id='gwt-uid-127']",
                "parametersPlusButton": "//button[@id='gwt-uid-128']//span",
                "authorizationTab": "//a[contains(text(),'Authorization')]",
                "authorizationDropDown": "//div[@id='id-dropdown-security']//span[@class='caret']",
                "authorizationType1": "//li[contains(@class, 'list-item')]/a[@title='",
                "authorizationType2": "']/span",
                "basicAuthUN": "//input[@id='id--basic-auth-key']",
                "basicAuthPW": "//input[@id='id--basic-auth-value']",
                "basicAuthUpdateButton": "//button[@id='id--basic-auth-update']",
                "headersTab": "//a[contains(text(),'Headers')]",
                "headersKey": "//div[@id='headers-tab']//div[",
                "headersKey1": "][@class='row key-value-pair']/div[1]/div/input",
                "headersValue1": "][@class='row key-value-pair']/div[2]/div/input",
                "headersPlusButton1": "][@class='row key-value-pair']/div[3]/button",
                "bodyTab": "//a[contains(text(),'Body')]",
                "bodyText": "//div[@class='CodeMirror-code']",
                "bodyText1": "//*[@id='body-tab']//pre/span/span",
                "responseText1": "//div[@class='CodeMirror-code']//span[contains(text(),'",
                "responseText2": "')]",
                "methodButton1": "//div[@class='",
                "methodButton2": "-method tryout-method']",
                "getButton": "//div[@class='GET-method tryout-method']",
                "postButton": "//div[@class='POST-method tryout-method']",
                "putButton": "//div[@class='PUT-method tryout-method']",
                "methodHeading1": "//li[@class='navigationItem nav-header-resource nav-header-resource-try-out' and text() = '",
                "methodHeading2": "']",
                "methodHeading3": "//li[contains(@id,'",
                "methodHeading4": "')]",
                "headerClearButton": "//button[text()='Clear']",
                "getAccessToken": "//a[contains(text(),'Get access token')]",
                "applicationName": "//input[@id='application-name']",
                "requestToken": "//a[@aria-label='Request token']",
                "messageWindow": "//p[contains(text(),'The access token has been requested and will be av')]",
                "closeButton": "//a[@aria-label='Close']",
                "tryoutAppDropdown": "//*[@id='tryout-application-dropdown']/a",
                "listApp1": "//li[contains(@class,'list-item')]//span[contains(text(),'",
                "listApp2": "')]",
                "tokenName": "//input[@id='id-tbox-token-name']",
                "scopeName1": "//option[contains(text(),'",
                "scopeName2": "')]",
                "getTokenButton": "//button[@class='btn' and text()='Get token']",
                "approveButton": "//input[@id='approve']",
                "inputCheckBox1": "//input[@id='",
                "inputCheckBox2": "']", 
                "labelName1": "//label[@id='label-name' and @for='",
                "labelName2": "']",
                "jwtAuthUN": "//input[@id='id-jwt-basic-auth-key']",
                "jwtAuthPW": "//input[@id='id-jwt-basic-auth-value']",
                "jwtAuthUpdateButton": "//button[@id='id-jwt-basic-auth-update']",
                "jwtTokenMessage": "//div[contains(text(),'JWT-')]",
                "responseRawButton": "//*[@id='id-response-body']//button[text()='Raw']",
                "responseBodyText1": "//*[@id='id-response-body']//pre/span/span[contains(text(),'",
                "responseBodyText2": "')]"
            },
            "SOAP": {
                "methodName": "//div[@class='tryout-left-side-navigation']//span[contains(text(),'",
                "methodNameEnd": "')]",
                "methodHeading": "//*[@id='soapTryout-soapTryoutComponent']//div/li[contains(text(),'",
                "methodHeadingEnd": "')]"
            }
        }
    },

    "userManagement": {
        "teamAndGroup": {
            "userManagement" : "User management",
            "users" :"users",
            "menuOptions" : "//a[@title='Menu options']",
            "delete1": "//tr[td[label[text()='",
            "delete2": "']] and td[label[text()='",
            "delete3": "']]]",
            "deleteIcon" : "//span[@title='Delete']",
            "deleteYesButton" : "//button[@class='btn btn-primary' and text()='Yes']",
            "selectGroup1" : "//label[@title='",
            "selectGroup2" : "']",
            "selectPrivilege1" : "//label[@for='",
            "selectPrivilege2" : "']",
            "editButton" : "//button[contains(text(),'Edit')]",
            "saveButton" : "//text()[contains(.,'Save')]/ancestor::button[1]",
            "alertMessage" : "//span[@class='alert-content floatLeft paddingTop10 marginLeft10']",
            "cleanInputField" : "//i[@class='fa fa-times']",
            "backToUserManagement" : "//a[contains(text(),'User Management')]"
        },
        "team": {
            "teamsLink": "accessprofiles",
            "addTeam": "//button[text()='Add team']",
            "name": "//input[@id='name']",
            "description" : "//textarea[@id='description']",
            "deleteYesButton" : "//button[@class='btn btn-primary' and text()='Yes']",
            "selectTeam1" : "//label[contains(text(),'",
            "selectTeam2" : "')]",
            "functionalPrivilege" : "//text()[contains(.,'Functional privileges')]/ancestor::a[1]",
            "groups" : "//text()[contains(.,'Groups')]/ancestor::a[1]",
            "inputGroup" : "//input[@id='findGroupTypeAheadModel']",
            "selectGroup1" : "//td[contains(text(),'",
            "selectGroup2" : "')]"
            
        },
        "group": {
            "groupsLink": "groups",
            "addGroupButton": "//button[text()='Add group']",
            "name": "//input[@id='name']",
            "description" : "//textarea[@id='description']",
            "addUsersButton" : "//h4[contains(text(),'Continue to associate users')]",
            "inputUser" : "//input[@id='findUserTypeAheadModel']",
            "selectUser1" : "//td[contains(text(),'",
            "selectUser2" : "')]",
            "editButton" : "//button[contains(text(),'Edit')]",
            "saveButton" : "//text()[contains(.,'Save')]/ancestor::button[1]",
            "alertMessage" : "//span[@class='alert-content floatLeft paddingTop10 marginLeft10']"
        }
    },

    "policies": {
        "threatProtection": {
            "threatProtectionLink": "Threat protection",
            "GlobalDOS": "//text()[contains(.,'Global denial of service')]/ancestor::a[1]",
            "enable": "//span[@class='toggle-knob']",
            "disable":"//span[@class='toggle-path toggle-active-theme']",
            "maxReq": "//input[@id='maximumRequests']",
            "reqPerSec": "//input[@id='requestsPerSeconds']",
            "inProgressReq": "//input[@id='inProgressRequests']",
            "blockIntervals": "//input[@id='blockInterval']",
            "customErrorMessage": "//textarea[@id='customErrorMessage']",
            "ipAddrs": "//input[@id='TempData']",
            "addButton": "//button[text()='Add']",
            "saveButton": "//button[@class='btn btn-primary' and contains(text(),'Save')]",
            "addRule": "//button[contains(text(),'Add rule')]",
            "rule": "//text()[contains(.,'Rules')]/ancestor::a[1]",
            "ruleName": "//input[@id='ruleName']",
            "ruleDesc": "//textarea[@id='description']",
            "clickAction": "//option[contains(text(),'Deny request and alert')]",
            "errorMessage": "//input[@id='errorMessage']",
            "alertMessage": "//span[@class='alert-content floatLeft paddingTop10 marginLeft10']",
            "actionType1": "//*[@id='action']/option[text()='",
            "commonEndingXpath": "']",
            "requestType": "//*[@id='requestType']/option[text()='",
            "clickSizeFilter": "//label[contains(text(),'Message size filter')]",
            "alertSettings": "//label[contains(text(),'Alert settings')]",
            "selectCustom": "//label[@for='alertSettings1']",
            "alertDestination": "//label[@for='alertTypeEmail']",
            "sendAlertEvery": "//label[contains(text(),'Every')]",
            "alertOnRuleViolation": "//label[contains(text(),'On rule violation')]",
            "inputEmailIds": "//label-field[span[text()='Email Ids']]/following-sibling::span[input[@id='TempData']]",
            "addEmailIds": "//td[input-field[div[label-field[span[text()='Email Ids']]]]]/following-sibling::td",
            "enableSizeFilter": "//div[@id='collapseOne']//span[@class='toggle-knob']",
            "maxSize": "//input[@id='messageSize']",
            "inputResourcePath": "//label-field[span[text()='Resource path']]/following-sibling::span/input",
            "inputCustomDirectives": "//label-field[span[text()='Custom directives']]/following-sibling::span/input",
            "addResourcePath": "//td[input-field[div[label-field[span[text()='Resource path']]]]]/following-sibling::td[simple-button[div[button[text()='Add']]]]",
            "addCustomDirectives": "//td[input-field[div[label-field[span[text()='Custom directives']]]]]/following-sibling::td[simple-button[div[button[text()='Add']]]]",
            "deleteRules1": "//tr[td[a[contains(text(),'",
            "deleteRules2": "')]]]//i[@href='#delete-egRule']",
            "confirmDeleteRule": "//div[@id='delete-egRule']//button[text()='Yes']",
            "menuOptions": "//a[@title='Menu options']",
            "analyticsLink": "Analytics",
            "loadingKibana": "//div[contains(text(),'API Gateway is loading')]"
        }
    }
}